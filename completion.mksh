#!/bin/mksh

function __mksh_completion_get_matches {
    local args
    set -A args -- "$@"
    local matches
    if [ "${#args[@]}" -gt 1 ]; then
        last_arg="${args[${#args[@]}-1]}"
        if [[ $last_arg = *[*?]* ]]; then
            eval "set -A matches -- $last_arg";
        else
            set -A matches -- "$last_arg"*;
        fi
        for match in "${matches[@]}"; do
            if [[ -d "${match}" ]]; then
                print -r -- "${match}/"
            else
                print -r -- "${match} "
            fi
        done
    elif [ "${#args[@]}" -eq 1 ] || [ "${#args[@]}" -eq 0 ]; then
        local paths
        set -o noglob; IFS=:; set -A paths -- $PATH; IFS=$' \t\n'; set +o noglob
        for path in "${paths[@]}"; do
            matches+=(${path:-.}/"$@"*);
        done
        for match in "${matches[@]}"; do
            print -r -- "${match##*/} "
        done |  LC_ALL=C sort -u | rg -v "$text\*"
    fi
}

__fzf_complete__() {
    if [[ ! "$1" = "$2" ]]; then
        print -n "$1"
    else
        local args
        set -A args -- $1
        if [ " " = "${1: -1}" ]; then
            args+=("")
        fi
        local sel
        sel=$(__mksh_completion_get_matches "${args[@]}" | \
            fzf-tmux -p60%,40% --no-info --prompt="â€º $1" --reverse -0 -1)
        if [[ $sel = *[![:space:]]* ]]; then
            unset "args[${#args[@]}-1]" && print -n "${args[@]}" "$sel"
        else
            print -n "${args[@]}"
        fi
    fi
}

# ' '             : set mark at cursor start
# ''              : copy the whole line
# ' '             : paste back the whole line, adding a space (to separate args)
# ' Q'        : paste back another copy of the whole line, and quote ($2)
# '^b'          : go back to the end of the first copy of the whole line
# ''            : complete, if possible
# ' Q'    : quote from beginning of line to end of completion ($1)
# ''              : goto beginning
# from here, we set a mark at beginning, add our command at beginning, go to end, and evaluate
bind -m '^[f'=' ^u^y  ^yQ^x^x^b ^a^x^xQ^a __fzf_complete__ ^e^e^a^e'
